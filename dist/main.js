/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/game.js":
/*!*********************!*\
  !*** ./src/game.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _trie_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./trie.js */ \"./src/trie.js\");\n/* harmony import */ var _gridNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gridNode.js */ \"./src/gridNode.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ \"./src/util.js\");\n\n\n\n\nlet globalDictionary = null;\n\nasync function getDictionay() {\n    const response = await fetch('dictionary.txt');\n    const data = await response.text();\n    globalDictionary = data.split(/\\r?\\n/).filter(word => {\n        return word.length > 2\n    })\n}\n\n// const puppeteer = require('puppeteer-core')\n\n// async function scrapeProduct(url) {\n//     const browser = await puppeteer.launch();\n//     const page = await browser.newPage()\n//     await page.goto(url);\n\n//     const [el] = await page.$x('//*[@id=\"tsuid17\"]/span/div/div/div[3]/div/div[4]/div/div/ol/li/div/div/div[1]/div/div/div[1]/span')\n//     const src = await el.getProperty('src')\n//     const srcTxt = src.jsonValue()\n\n//     console.log({srcTxt})\n// }\n\nasync function game() {\n    await getDictionay()\n    const root = new _trie_js__WEBPACK_IMPORTED_MODULE_0__.trieNode(null);\n    for (const item of globalDictionary)\n        (0,_trie_js__WEBPACK_IMPORTED_MODULE_0__.add)(item, 0, root)\n    \n    ;(0,_util_js__WEBPACK_IMPORTED_MODULE_2__.modal)()\n    \n    // scrapeProduct('https://www.google.com/search?q=definition+of+google&oq=definition+of+google&aqs=chrome..69i57.6749j0j9&sourceid=chrome&ie=UTF-8')\n\n\n    let [grid, completeNodes, gamePoints] = (0,_gridNode_js__WEBPACK_IMPORTED_MODULE_1__.setUpGrid)(root)\n    \n    ;(0,_util_js__WEBPACK_IMPORTED_MODULE_2__.timer)(grid, completeNodes, gamePoints)\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (game);\n\n//# sourceURL=webpack://wordmaze/./src/game.js?");

/***/ }),

/***/ "./src/gridNode.js":
/*!*************************!*\
  !*** ./src/gridNode.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gridNode\": () => (/* binding */ gridNode),\n/* harmony export */   \"ancestoryNode\": () => (/* binding */ ancestoryNode),\n/* harmony export */   \"foundNodes\": () => (/* binding */ foundNodes),\n/* harmony export */   \"setUpGrid\": () => (/* binding */ setUpGrid),\n/* harmony export */   \"setUpTiles\": () => (/* binding */ setUpTiles),\n/* harmony export */   \"colorChange\": () => (/* binding */ colorChange),\n/* harmony export */   \"findWords\": () => (/* binding */ findWords)\n/* harmony export */ });\n/* harmony import */ var _trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./trie */ \"./src/trie.js\");\n\n\n//lets try unnesting the ancestoryNode from inside of this node\nfunction gridNode(coordinates) {\n    this.neighbors = [];\n    this.coordinates = coordinates;\n    this.tile = document.createElement('div')\n    this.tile.className = \"game-tile\";\n    this.tile.onselectstart = () => {\n        return false;\n    }\n    let letter = \"AABCDEEFGHIIJKLMNOOPQRSSTUUVWXYZ\"[Math.floor(Math.random() * 32)]\n    this.ch = letter;\n\n    this.innerTile = document.createElement('div')\n    this.innerTile.className = \"inner-game-tile\"\n    this.innerTile.innerHTML = `${letter}`;\n\n    this.innerTileContainer = document.createElement('div')\n    this.innerTileContainer.className = \"inner-tile-container\"\n    this.innerTileContainer.appendChild(this.innerTile)\n\n    this.tile.appendChild(this.innerTileContainer)\n\n    this.selected = false;\n}\n\nfunction ancestoryNode(node) {\n    this.node = node;\n    this.complete = false;\n    this.children = {};\n    this.parent = null;\n\n    this.points = 100;\n    this.found = false;\n}\n\nfunction foundNodes(rootNode) {\n    this.foundList = []\n}\n\nfunction setUpGrid(root) {\n    //set up neighbor check\n    const nCheck = [\n        [-1, 1],\n        [0, 1],\n        [1, 1],\n        [1, 0],\n        [1, -1],\n        [0, -1],\n        [-1, -1],\n        [-1, 0]\n    ]\n    \n    let gameWords = []\n    let newGrid = []\n    let completeNodes = {}\n    while (gameWords.length < 70) {\n        const grid = []\n        newGrid = []\n        gameWords = []\n        //set up gridNodes for gameBoard\n        for (let i = 0; i < 4; i++) {\n            let row = []\n            for (let j = 0; j < 4; j++) {\n                let gNode = new gridNode(`${j},${i}`)\n                gNode.tile.style.left = j * 100 + \"px\";\n                gNode.tile.style.top = i * 100 + \"px\";\n                row.push(gNode)\n            }\n            grid.push(row)\n        }\n    \n        //set up gridNode neighbors\n        for (let i = 0; i < grid.length; i++) {\n            for (let j = 0; j < grid[0].length; j++) {\n    \n                //set up neighbors\n                nCheck.forEach(n => {\n                    let x = n[0] + j;\n                    let y = n[1] + i;\n                    //handle edge cases\n                    if (x >= 0 && x < grid.length && y >= 0 && y < grid[0].length) {\n                        grid[j][i].neighbors.push(grid[x][y])\n                    }\n                })\n            }\n        }\n    \n        //find all gameWords, set up newGrid with ancestoryNodes, and set up completeNodes object\n        for (let y = 0; y < grid.length; y++) {\n            let row = [];\n            for (let x = 0; x < grid[0].length; x++) {\n                let arr = findWords(grid[y][x], root.map[grid[y][x].ch])\n                row.push(arr[1])\n                arr[0].forEach(word => {\n                    if (!gameWords.includes(word)) {\n                        gameWords.push(word)\n                    }\n                })\n                completeNodes[arr[1].node.coordinates] = arr[2]\n            }\n            newGrid.push(row)\n        }\n        console.log(gameWords)\n    }\n\n    // I don't want to call setUpTiles until gameWords is longer than 70 words\n    return setUpTiles(newGrid, gameWords, completeNodes)\n}\n\nfunction setUpTiles(grid, gameWords, completeNodes) {\n    //this grid is a grid full of ancestory nodes\n    const gameBoardContainer = document.querySelector('.game-board-container')\n    const gamePointsDiv = document.querySelector('.gamepoints')\n    const countdownDiv = document.querySelector('.countdown')\n    const pointExpression = document.querySelector('.point-expression')\n    const countExpression = document.querySelector('.count-expression')\n    const svgContainer = document.querySelector('.svg-container')\n    const wordContainer = document.querySelector('.word-container')\n    let mouseDown = false;\n    let word = \"\"\n    let selectedNodes = [];\n    let line = [];\n    let nodeAdam = null;\n    let firstNode = null\n\n    let gamePoints = 0;\n    let foundWords = []\n\n    let completedTiles = []\n\n    //dead cells\n    for (let key in completeNodes) {\n        if (!completeNodes[key].length) {\n            let [x,y] = key.split(',')\n            grid[y][x].node.innerTileContainer.style.color = 'white'\n            grid[y][x].node.innerTileContainer.style.filter = 'brightness(90%)'\n        }\n    }\n\n    wordContainer.onselectstart = () => {\n        return false;\n    }\n    \n    gameBoardContainer.addEventListener(\"mousedown\", () => {\n        mouseDown = true;\n        return false;\n    })\n    \n    gameBoardContainer.addEventListener(\"mouseup\", () => {\n\n        //I might not need this anymore\n        if (gameWords.includes(word) && !foundWords.includes(word)) {\n            foundWords.push(word)\n        }\n\n        for (let i = 0; i < grid.length; i++) {\n            for (let j = 0; j < grid[0].length; j++) {\n                let gNode = grid[i][j].node;\n                gNode.innerTile.classList.remove('selected-inner-tile-grow')\n                gNode.innerTile.classList.remove('selected-inner-tile-shrink')\n                gNode.innerTileContainer.classList.remove('selected-inner-tile')\n                if (!completedTiles.includes(gNode)) {\n                    gNode.innerTile.style.backgroundColor = \"transparent\"\n                } else {\n                    gNode.innerTile.style.backgroundColor = \"rgba(0, 230, 65, 0.45)\"\n                }\n                gNode.innerTile.style.width = \"70px\";\n                gNode.innerTile.style.height = \"70px\";\n                gNode.selected = false\n            }\n        }\n        if (!nodeAdam.found && nodeAdam.complete && gameWords.includes(word)) {\n            nodeAdam.found = true;\n            let idx = completeNodes[firstNode].indexOf(nodeAdam)\n            completeNodes[firstNode] = completeNodes[firstNode].slice(0, idx).concat(completeNodes[firstNode].slice(idx + 1))\n\n            if (!completeNodes[firstNode].length) {\n                let [x, y] = firstNode.split(',')\n                // grid[y][x].node.innerTileContainer.style.color = 'white'\n                // grid[y][x].node.innerTileContainer.style.filter = 'brightness(90%)'\n                grid[y][x].node.innerTile.style.backgroundColor = \"rgba(0, 230, 65, 0.45)\"\n                grid[y][x].node.innerTile.style.boxShadow = \"3px 3px 10px white\"\n\n                completedTiles.push(grid[y][x].node)\n            }\n\n            gamePoints += nodeAdam.points\n            \n            pointExpression.innerHTML = `+${nodeAdam.points}!!`;\n            pointExpression.classList.add('point-shrink')\n            setTimeout(() => {\n                pointExpression.classList.remove('point-shrink')\n                pointExpression.innerHTML = \"\";\n                gamePointsDiv.innerHTML = gamePoints\n            }, 900)\n        }\n        \n        word = \"\";\n        selectedNodes = [];\n        line = [];\n        nodeAdam = null;\n        firstNode = null;\n        wordContainer.style.display = \"none\"\n    \n\n        while (svgContainer.firstChild) {\n            svgContainer.removeChild(svgContainer.firstChild)\n        }\n    })\n\n    for (let i = 0; i < 4; i++) {\n        for (let j = 0; j < 4; j++) {\n            let gNode = grid[i][j].node\n\n            //when I mousedown then I'm using this as my first tile\n            gNode.innerTile.addEventListener(\"mousedown\", () => {\n                mouseDown = true;\n                if (!gNode.selected) {\n                    word += gNode.ch\n                    selectedNodes.push(gNode)\n                    // gNode.tile.style.backgroundColor = \"blue\";\n                    gNode.innerTileContainer.classList.add('selected-inner-tile')\n\n                    nodeAdam = grid[i][j]\n                    firstNode = `${j},${i}`\n                }\n                gNode.selected = true;\n            })\n\n            //when I mousemove I am building potential words\n            gNode.innerTile.addEventListener(\"mousemove\", () => {\n                let lastNode\n                if (mouseDown) {\n                    //I know that I'm mousing over the node...\n                    if (!gNode.selected) {\n                        let newLine = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n                        let [x1, y1] = selectedNodes[selectedNodes.length -1].coordinates.split(',')\n                        let [x2, y2] = gNode.coordinates.split(',')\n                        newLine.setAttribute('class', 'game-line')\n                        newLine.setAttribute('x1', `${x1 * 100 + 50}`)\n                        newLine.setAttribute('y1', `${y1 * 100 + 50}`)\n                        newLine.setAttribute('x2', `${x2 * 100 + 50}`)\n                        newLine.setAttribute('y2', `${y2 * 100 + 50}`)\n                        line.push(newLine)\n                        svgContainer.appendChild(newLine)\n\n                        word += gNode.ch;\n                        selectedNodes.push(gNode)\n                        // gNode.tile.style.backgroundColor = \"blue\"\n                        \n                        if (nodeAdam && nodeAdam.children[gNode.coordinates]\n                            && nodeAdam.node === selectedNodes[selectedNodes.length - 2]) {\n                            nodeAdam = nodeAdam.children[gNode.coordinates]\n                        }\n                        \n                        lastNode = selectedNodes[selectedNodes.length - 1];\n                    } else {\n                        if (selectedNodes.includes(gNode)) {\n                            let currentNode\n                            for (let i = selectedNodes.length - 1; i >= 0; i--) {\n                                currentNode = selectedNodes[i];\n                                if (currentNode === gNode) {\n                                    break\n                                } else {\n                                    // currentNode.tile.style.backgroundColor = \"white\";\n                                    currentNode.innerTileContainer.classList.remove('selected-inner-tile')\n                                    currentNode.innerTile.classList.remove('selected-inner-tile-shrink')\n                                    currentNode.innerTile.classList.remove('selected-inner-tile-grow')\n                                    currentNode.innerTile.style.backgroundColor = \"transparent\"\n                                    currentNode.selected = false\n                                    word = word.slice(0, word.length - 1)\n                                    selectedNodes.pop();\n                                }\n                            }\n                            if (nodeAdam.parent && currentNode === nodeAdam.parent.node) {\n                                nodeAdam = nodeAdam.parent\n                            }\n                            lastNode = selectedNodes[selectedNodes.length - 1];\n                        }\n                    }\n                    //there will always be one more selectedNode than there is lines\n                    //therefore I just need to delete all the lines past selectedNodes.length - 2\n                    let x = selectedNodes.length - 1\n                    let dif = svgContainer.children.length - x\n                    for (let i = 0; i < dif; i++) {\n                        if (svgContainer.lastChild) svgContainer.removeChild(svgContainer.lastChild)\n                    }\n                    for (let i = 0; i < selectedNodes.length; i++) {\n                        let node1 = selectedNodes[i]\n                        node1.innerTileContainer.classList.add('selected-inner-tile')\n                        //now check to see if I have a complete word or not\n                        wordContainer.style.display = \"flex\"\n                        if (lastNode === nodeAdam.node && nodeAdam.complete) {\n                            node1.innerTile.classList.remove('selected-inner-tile-shrink')\n                            node1.innerTile.classList.add('selected-inner-tile-grow')\n\n                            if (nodeAdam.found) {\n                                //user has found this word in this path\n                                colorChange(line, \"yellow\", wordContainer, word, node1, \"hsla(60, 100%, 75%, 0.6)\")\n                            } else {\n                                //user has found a word on a new path\n                                colorChange(line, \"white\", wordContainer, `${word}  (+${nodeAdam.points})!`, node1, \"hsla(137, 100%, 45%, 0.45)\")\n                            }\n                        } else {\n                            node1.innerTile.classList.remove('selected-inner-tile-grow')\n                            node1.innerTile.classList.add('selected-inner-tile-shrink')\n                            colorChange(line, \"red\", wordContainer, word, node1, \"hsla(5, 90%, 51%, 0.6)\")\n                        }\n                    }\n                    gNode.selected = true\n                }\n            })\n            \n            gNode.innerTile.addEventListener(\"mouseup\", () => {\n                mouseDown = false;\n                gNode.selected = false;\n            })\n            gameBoardContainer.appendChild(gNode.tile)\n        }\n    }\n\n    return [grid, completeNodes, gamePoints]\n}\n\nfunction colorChange(line, color, wordContainer, word, node, tileColor) {\n    wordContainer.innerHTML = word;\n    wordContainer.style.backgroundColor = tileColor\n    node.innerTile.style.backgroundColor = tileColor\n    return line.forEach(el => {\n        el.style.stroke = color\n    })\n}\n\nfunction findWords(gridNode, tree) {\n    //gridNode could be my Adam\n    const words = [];\n    //pos 2 of all queued is the path from original gridNode to currentNode\n    //use pos 2 to key into ancestory to set up next nodes\n    let rootAncNode = new ancestoryNode(gridNode);\n    const queue = [[tree, rootAncNode, [gridNode]]];\n    let completeNodes = []\n\n    while (queue.length) {\n        let ele = queue.shift();\n        if (ele[0].complete) {\n            let currentWord = (0,_trie__WEBPACK_IMPORTED_MODULE_0__.fetchWord)(ele[0])\n            if (!words.includes(currentWord)) {\n                words.push(currentWord)\n            }\n        }\n        let visitedNodes = ele[2].slice()\n        for (let i = 0; i < ele[1].node.neighbors.length; i++) {\n            if (!visitedNodes.includes(ele[1].node.neighbors[i]) &&\n                !ele[2].includes(ele[1].node.neighbors[i])) {\n\n                let path = ele[2].slice()\n                path.push(ele[1].node.neighbors[i])\n                visitedNodes.push(ele[1].node.neighbors[i])\n\n                let char = ele[1].node.neighbors[i].ch\n                let subTree = ele[0]\n                if (subTree.map[char]) {\n                    subTree = subTree.map[char];\n                    \n                    let currentNode = rootAncNode\n                    //key into ancestory until at the right position\n                    for (let x = 0; x < ele[2].length; x++) {\n                        if (currentNode.children[ele[2][x].coordinates]) {\n                            currentNode = currentNode.children[ele[2][x].coordinates]\n                        }\n                    }\n\n                    currentNode.children[ele[1].node.neighbors[i].coordinates] = new ancestoryNode(ele[1].node.neighbors[i])\n                    let newAncNode = currentNode.children[ele[1].node.neighbors[i].coordinates]\n                    newAncNode.complete = subTree.complete\n                    newAncNode.parent = ele[1]\n\n                    //the point system\n                    newAncNode.points = newAncNode.parent.points * 2;\n\n                    //the complete and found words system\n                    if (subTree.complete) {\n                        completeNodes.push(newAncNode)\n                    }\n\n                    queue.push([subTree, newAncNode, path])\n                }\n            }\n        }\n    }\n    return [words, rootAncNode, completeNodes]\n}\n\n//# sourceURL=webpack://wordmaze/./src/gridNode.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _game_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game.js */ \"./src/game.js\");\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    (0,_game_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])()\n})\n\n//# sourceURL=webpack://wordmaze/./src/index.js?");

/***/ }),

/***/ "./src/trie.js":
/*!*********************!*\
  !*** ./src/trie.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"trieNode\": () => (/* binding */ trieNode),\n/* harmony export */   \"add\": () => (/* binding */ add),\n/* harmony export */   \"search\": () => (/* binding */ search),\n/* harmony export */   \"fetchWord\": () => (/* binding */ fetchWord)\n/* harmony export */ });\nfunction trieNode(ch) {\n    this.ch = ch;\n    this.complete = false;\n    this.map = {};\n    this.parent = null;\n    this.words = [];\n}\n\nfunction add(str, i, root) {\n    if (i === str.length) {\n        root.complete = true;\n        return\n    }\n\n    if (!root.map[str[i]]) {\n        root.map[str[i]] = new trieNode(str[i])\n        root.map[str[i]].parent = root;\n    }\n\n    root.words.push(str);\n    add(str, i + 1, root.map[str[i]]);\n}\n\nfunction search(str, i, root) {\n    if (i === str.length) \n        return root.words;\n\n    if (!root.map[str[i]])\n        return [];\n    \n    return search(str, i+1, root.map[str[i]]);\n}\n\nfunction fetchWord(currentNode) {\n    let nodeCheck = currentNode;\n    let word = '';\n    while(nodeCheck.parent !== null) {\n        word = nodeCheck.ch + word;\n        nodeCheck = nodeCheck.parent;\n    }\n    \n    return word;\n}\n\n//# sourceURL=webpack://wordmaze/./src/trie.js?");

/***/ }),

/***/ "./src/util.js":
/*!*********************!*\
  !*** ./src/util.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"modal\": () => (/* binding */ modal),\n/* harmony export */   \"timer\": () => (/* binding */ timer),\n/* harmony export */   \"gameOverModal\": () => (/* binding */ gameOverModal),\n/* harmony export */   \"wordPaths\": () => (/* binding */ wordPaths),\n/* harmony export */   \"drawLine\": () => (/* binding */ drawLine)\n/* harmony export */ });\n\nfunction modal() {\n    const modalBtn = document.querySelector('.modal-button');\n    const modalBg = document.querySelector('.modal-bg');\n    const modalClose = document.querySelector('.modal-close');\n    const modalChild = document.querySelector('.modal-child');\n    const modalTitle = document.querySelector('.modal-title');\n\n    const modalInner = document.querySelector('.modal-inner');\n    \n    modalBtn.addEventListener('click', function() {\n        //get rid of any other divs in modal and only show instructions (for now)\n        if (modalInner.children.length < 2) {\n            modalInner.removeChild(modalInner.lastElementChild)\n        }\n\n        modalBg.classList.add('bg-active')\n        modalTitle.innerHTML = \"INSTRUCTIONS\"\n        modalChild.innerHTML = \"-Make as many words as you can by swiping through adjacent tiles.<br>-Only words that are 3 letters or longer will be accepted.<br>-You can repeat words so long as you use a different arrangement of letters.\"\n    })\n\n    modalClose.addEventListener('click', function() {\n        modalBg.classList.remove('bg-active');\n    })\n}\n\nfunction timer(grid, completeNodes, gamePoints) {\n    const countdownEl = document.querySelector('.countdown');\n    const modalChild = document.querySelector('.modal-child')\n    const modalBg = document.querySelector('.modal-bg')\n\n    let miniGrid = []\n    grid.forEach(row => {\n        let miniRow = []\n        row.forEach(ancNode => {\n            let miniTile = document.createElement('div')\n            let innerMiniTileContainer = document.createElement('div')\n            let innerMiniTile = document.createElement('div')\n            miniTile.className = \"mini-tile\";\n            innerMiniTileContainer.className = \"inner-mini-tile-container\"\n            innerMiniTile.className = \"inner-mini-tile\"\n            innerMiniTile.innerHTML = ancNode.node.ch\n\n            innerMiniTileContainer.appendChild(innerMiniTile)\n            miniTile.appendChild(innerMiniTileContainer)\n            miniRow.push(miniTile)\n        })\n        miniGrid.push(miniRow)\n    })\n\n    let time = 120;\n    let t = setInterval(updateCountdown, 1000);\n    let stop = false;\n\n    function updateCountdown() {\n        const minutes = Math.floor(time / 60)\n        let seconds = time % 60;\n\n        seconds = seconds < 10 ? '0' + seconds : seconds;\n\n        countdownEl.innerHTML = `${minutes}:${seconds}`\n\n        if (time > 0) time--;\n\n        //open the modal and show the score, whether user passed the stage and all the possible words\n        if (time === 0 && !stop) {\n            gameOverModal(grid, miniGrid, completeNodes, gamePoints)\n            stop = true;\n\n            modalBg.classList.add('bg-active')\n        }\n    }\n}\n\nfunction gameOverModal(grid, miniGrid, completeNodes, gamePoints) {\n\n    let totalPoints = 0;\n    let passStage = false;\n\n    const allPaths = document.createElement('div');\n    const completeCells = [];\n    const deadCells = [];\n    allPaths.className = \"all-paths\"\n    //grab each root ancestory node and return the mini paths with all words\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[0].length; j++) {\n            //I am passing each root Ancestory Node from here.\n            let rootNode = grid[i][j]\n            let tile = null\n            let [div, completeCell, deadCell, cellTotalPoints] = wordPaths(rootNode, miniGrid, completeNodes)\n            if (completeCell) {\n                tile = grid[i][j].node.innerTileContainer.cloneNode(true)\n                completeCells.push([tile, cellTotalPoints])\n\n                totalPoints += cellTotalPoints + 50000;\n            } else if (deadCell) {\n                tile = grid[i][j].node.innerTileContainer.cloneNode(true)\n                deadCells.push(tile)\n            }\n            allPaths.appendChild(div)\n        }\n    }\n\n    const modalTitle = document.querySelector('.modal-title')\n    const modalChild = document.querySelector('.modal-child')\n    const modalInner = document.querySelector('.modal-inner')\n\n    if (completeCells.length) {\n        let completeCellsDiv = document.createElement('div');\n        completeCellsDiv.className = \"complete-cells-div\"\n        let innerCompleteCellsDiv = document.createElement('div')\n        innerCompleteCellsDiv.className = \"inner-complete-cells-div\"\n        let cellsDivTitle = document.createElement('div')\n        cellsDivTitle.className = \"cells-div-title\"\n        let cellsDivBigScore = document.createElement('div')\n        cellsDivBigScore.className = \"cells-div-big-score\"\n        let cellsDivSmallScore = document.createElement('div')\n        cellsDivSmallScore.className = \"cells-div-small-score\"\n        let cellsDivTitleContainer = document.createElement('div');\n        cellsDivTitleContainer.className = \"cells-div-title-container\"\n        let cellsDiv = document.createElement('div')\n        cellsDiv.className = \"cells-div\"\n\n        cellsDivTitle.innerHTML = \"COMPLETED TILES\"\n        cellsDivSmallScore.innerHTML = totalPoints\n        cellsDivBigScore.innerHTML = completeCells.length * 50000\n\n        cellsDivTitleContainer.appendChild(cellsDivTitle)\n        cellsDivTitleContainer.appendChild(cellsDivSmallScore)\n        cellsDivTitleContainer.appendChild(cellsDivBigScore)\n\n        innerCompleteCellsDiv.appendChild(cellsDivTitleContainer)\n\n        // let divCover = document.createElement('div')\n        // divCover.className = \"div-cover\"\n        // cellsDiv.appendChild(divCover)\n        completeCells.forEach(arr => {\n            let [cell, cellTotalPoints] = arr\n            let innerCellsDiv = document.createElement('div')\n            innerCellsDiv.className = \"inner-cells-div\"\n            innerCellsDiv.backgroundColor = \"hsla(137, 100%, 45%, 0.7)\"\n            let cellScoreDiv = document.createElement('div')\n            cellScoreDiv.className = \"cell-score-div\"\n            cellScoreDiv.innerHTML = \"+50000 points\"\n            let miniCellScoreDiv = document.createElement('div')\n            miniCellScoreDiv.className = \"mini-cell-score-div\"\n            miniCellScoreDiv.innerHTML = `+${cellTotalPoints} points`\n            innerCellsDiv.appendChild(cell)\n            innerCellsDiv.appendChild(miniCellScoreDiv)\n            innerCellsDiv.appendChild(cellScoreDiv)\n            cellsDiv.appendChild(innerCellsDiv)\n\n            // let divCover = document.createElement('div')\n            // divCover.className = \"div-cover\"\n            // cellsDiv.appendChild(divCover)\n        })\n        \n        innerCompleteCellsDiv.appendChild(cellsDiv)\n        completeCellsDiv.appendChild(innerCompleteCellsDiv)\n        modalInner.appendChild(completeCellsDiv)\n    }\n    // if (deadCells.length) {\n    //     let deadCellsDiv = document.createElement('div');\n    //     deadCellsDiv.className = \"dead-cells-div\"\n    //     deadCells.forEach(cell => {\n    //         deadCellsDiv.appendChild(cell)\n    //     })\n    //     modalInner.appendChild(deadCellsDiv)\n    // }\n\n    modalTitle.innerHTML = \"Time's Up!\"\n    modalChild.innerHTML = \"15000 points needed to move on and at least one tile needs to be complete.\"\n    modalInner.appendChild(allPaths)\n}\n\n//this function should return the array of mini divs that show the paths\nfunction wordPaths(rootNode, miniGrid, completeNodes) {\n    let miniBoard = document.createElement('div')\n    let deadCell = true;\n    let completeCell = false;\n    let totalPoints = 0\n\n    miniBoard.className = \"mini-board\";\n    for (let i = 0; i < miniGrid.length; i++) {\n        for (let j = 0; j < miniGrid[0].length; j++) {\n            miniGrid[j][i].style.left = i * 25 + \"px\";\n            miniGrid[j][i].style.top = j * 25 + \"px\";\n            miniBoard.append(miniGrid[j][i])\n        }\n    }\n    //create the mini game board to then draw the line over it to show the path\n    const currentPathsOuter = document.createElement('div');\n    currentPathsOuter.className = 'current-paths-outer'\n\n    const currentPathsInner = document.createElement('div');\n    currentPathsInner.className = 'current-paths-inner'\n\n    const titleContainer = document.createElement('div')\n    titleContainer.className = \"title-container\"\n\n    const totalTilePointsDiv = document.createElement('div')\n    totalTilePointsDiv.className = 'tile-points-div'\n\n    const title = document.createElement('div')\n    title.className = 'path-title'\n    title.innerHTML = `All possible words with ${rootNode.node.ch} at ${rootNode.node.coordinates}`\n\n    //I need to BFS through the rootNode tree to find all words\n    let queue = [rootNode];\n    while (queue.length) {\n        let currentNode = queue.shift();\n        \n        for (const key in currentNode.children) {\n            queue.push(currentNode.children[key])\n        }\n        \n        //I need to create new mini svg containers to place over the mini game boards\n        if (currentNode.complete) {\n            deadCell = false;\n            totalPoints += currentNode.points\n            let miniGridCopy = []\n            for (let y = 0; y < miniGrid.length; y++) {\n                let row = []\n                for (let x = 0; x < miniGrid[0].length; x++) {\n                    let tileCopy = miniGrid[y][x].cloneNode(true)\n                    row.push(tileCopy)\n                }\n                miniGridCopy.push(row);\n            }\n            \n            let miniBoardContainer = drawLine(currentNode, miniGridCopy)\n            \n            currentPathsInner.append(miniBoardContainer)\n        }\n    }\n    \n    let [x, y] = rootNode.node.coordinates.split(',')\n    if (!completeNodes[`${x},${y}`].length && !deadCell) {\n        currentPathsOuter.style.backgroundColor = \"hsla(137, 100%, 45%, 0.4)\"\n        totalTilePointsDiv.innerHTML = `+${totalPoints}!`\n        totalTilePointsDiv.style.backgroundColor = \"hsla(137, 100%, 45%, 0.7)\"\n        completeCell = true;\n    } else if (deadCell) {\n        currentPathsOuter.style.backgroundColor = \"hsla(0, 0%, 0%, 0.4)\"\n        totalTilePointsDiv.innerHTML = \"0\"\n        totalTilePointsDiv.style.backgroundColor = \"hsla(0, 0%, 0%, 0.6\"\n        totalPoints = 0\n    } else {\n        totalTilePointsDiv.innerHTML = `${totalPoints}`\n        totalPoints = 0\n    }\n    titleContainer.appendChild(title)\n    titleContainer.appendChild(totalTilePointsDiv)\n    currentPathsOuter.appendChild(titleContainer)\n    titleContainer.appendChild(totalTilePointsDiv)\n    currentPathsOuter.appendChild(currentPathsInner)\n    return [currentPathsOuter, completeCell, deadCell, totalPoints]\n}\n\nfunction drawLine(currentNode, miniGrid) {\n    let svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    let miniBoardCopy = document.createElement('div');\n    miniBoardCopy.className = \"mini-board\"\n    let wordContainer = document.createElement('div')\n    wordContainer.className = \"mini-word-container\"\n    let miniBoardContainer = document.createElement('div')\n    miniBoardContainer.className = \"mini-board-container\"\n    let wordContainerShade = document.createElement('div')\n    wordContainerShade.className = \"word-container-shade\"\n    let pointsContainer = document.createElement('div')\n    pointsContainer.className = \"mini-word-container\"\n    let pointsContainerShade = document.createElement('div')\n    pointsContainerShade.className = \"word-container-shade\"\n    let pointOuterContainer = document.createElement('div')\n    pointOuterContainer.className = \"point-outer-container\"\n    let wordOuterContainer = document.createElement('div')\n    wordOuterContainer.className = \"mini-word-outer-container\"\n    let word = currentNode.node.ch\n    let lineColor = \"white\"\n    let tileColor = \"hsla(60, 100%, 65%, 0.8)\"\n    let pointColor = \"hsla(60, 100%, 65%, 0.8)\"\n    let [x, y] = currentNode.node.coordinates.split(',')\n    let currentTile = miniGrid[y][x].firstChild\n    currentTile.firstChild.style.backgroundColor = tileColor\n    currentTile.style.width = \"19px\"\n    currentTile.style.height = \"19px\"\n\n    let points = currentNode.points\n    let found = false;\n    if (currentNode.found) {\n        found = true;\n        tileColor = \"hsla(137, 100%, 45%, 0.4)\"\n        pointColor = \"hsla(137, 100%, 45%, 0.4)\"\n        currentTile.firstChild.style.backgroundColor = tileColor\n\n        points = `+${points}!`\n    }\n    wordContainerShade.style.backgroundColor = tileColor\n    pointsContainerShade.style.backgroundColor = pointColor\n    pointsContainerShade.innerHTML = points;\n    pointsContainer.append(pointsContainerShade)\n    \n    svg.setAttribute('width', '100');\n    svg.setAttribute('height', '100');\n    svg.style.zIndex = 5\n    \n    while(currentNode.parent) {\n        let newLine = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n        let [x1, y1] = currentNode.node.coordinates.split(',');\n        let [x2, y2] = currentNode.parent.node.coordinates.split(',');\n        newLine.setAttribute('class', 'mini-game-line')\n        newLine.setAttribute('stroke', lineColor)\n        newLine.setAttribute('x1', `${x1 * 25 + 12.5}`)\n        newLine.setAttribute('y1', `${y1 * 25 + 12.5}`)\n        newLine.setAttribute('x2', `${x2 * 25 + 12.5}`)\n        newLine.setAttribute('y2', `${y2 * 25 + 12.5}`)\n        svg.appendChild(newLine)\n        \n        word = currentNode.parent.node.ch + word;\n        currentNode = currentNode.parent\n        let [x, y] = currentNode.node.coordinates.split(',')\n        currentTile = miniGrid[y][x].firstChild\n        currentTile.firstChild.style.backgroundColor = tileColor\n        currentTile.style.width = \"19px\";\n        currentTile.style.height = \"19px\";\n    }\n    \n    for (let i = 0; i < miniGrid.length; i++) {\n        for (let j = 0; j < miniGrid[0].length; j++) {\n            miniBoardCopy.appendChild(miniGrid[i][j])\n        }\n    }\n    pointsContainer.style.margin = \"none\"\n    pointOuterContainer.append(pointsContainer)\n\n    wordContainerShade.innerHTML = word\n    wordContainer.append(wordContainerShade)\n    wordOuterContainer.append(wordContainer)\n    miniBoardCopy.append(svg)\n    miniBoardContainer.append(pointOuterContainer)\n    miniBoardContainer.append(miniBoardCopy)\n    miniBoardContainer.append(wordOuterContainer)\n    if (found) {\n        miniBoardContainer.style.boxShadow = \"5px -3px 10px\"\n    } else {\n        miniBoardContainer.style.boxShadow = \"5px 5px 10px inset\"\n        let shadowContainer = document.createElement('div');\n        shadowContainer.className = \"shadow-container\"\n        miniBoardContainer.appendChild(shadowContainer)\n    }\n    return miniBoardContainer\n}\n\n//# sourceURL=webpack://wordmaze/./src/util.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;